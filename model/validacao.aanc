<?php
/**
 * Created by PhpStorm.
 * User: Leonardo Vilarinho
 * Date: 28/03/2016
 * Time: 14:16
 */

/**
 * @param $str
 * @param string $erro
 * @param bool $obrigatorio
 * @return bool
 * @throws Exception
 * Validação de string quando é permitido ter número
 */
function validaStringNumeral($str, $erro = "Entrada inválida", $obrigatorio = false)
{
    if(!$obrigatorio and $str == "")
    {
        return true;
    }
    if(is_string($str))
    {
        if(mb_stripos($str, " and ") or mb_stripos($str, " or "))
        {
            throw new Exception($erro);
            return false;
        }
        return true;
    }
    else
    {
        return false;
    }
}

/**
 * @param $str
 * @param string $erro
 * @param bool $obrigatorio
 * @return bool
 * @throws Exception
 * Validação de string só com letras e caracteres
 */
function validaString($str, $erro = "Entrada inválida", $obrigatorio = false)
{
    if(!$obrigatorio and $str == "")
    {
        return true;
    }
    if(is_string($str))
    {
        if(mb_stripos($str, " and ") or mb_stripos($str, " or "))
        {
            throw new Exception($erro);
            return false;
        }
        for($num = 0; $num < 10; $num++)
        {
            if(mb_stripos($str, $num))
            {
                throw new Exception($erro);
                return false;
            }
        }
        return true;
    }
    else
    {
        return false;
    }
}

/**
 * @param $area
 * @return bool
 * @throws Exception
 * Verifica se uma rea foi marcada
 */
function validaArea($area)
{
    if($area == 0)
    {
        throw new Exception("Informe um(a) area/curso.");
        return false;
    }
    else
    {
        return true;
    }
}

/**
 * @param $email
 * @return bool
 * @throws Exception
 * Validação de email
 */
function validaEmail($email)
{
    if(!filter_var($email, FILTER_VALIDATE_EMAIL))
    {
        throw new Exception("Email informado é inválido.");
        return false;
    }
    else
    {
        return true;
    }
}

/**
 * @param $nascimento
 * @return bool
 * @throws Exception
 * Verifica se pessoa tem mais de 18 anos
 */
function validaIdade($nascimento, $idadeMinima)
{
    if(!empty($nascimento) and (date("Y") - mb_substr($nascimento, 0, 4) ) < $idadeMinima)
    {
        throw new Exception("Verifique sua idade, foi informada uma idade menor de {$idadeMinima} anos");
        return false;
    }
    else
    {
        return true;
    }
}

/**
 * @param $int
 * @param string $erro
 * @param bool $obrigatorio
 * @return bool
 * @throws Exception
 * Valida numero inteiro
 */
function validaInteiro($int, $erro = "Campo inteiro inválido", $obrigatorio = false)
{
    if(!$obrigatorio and empty($int))
    {
        return true;
    }
    if(!filter_var($int, FILTER_VALIDATE_INT))
    {
        throw new Exception($erro);
        return false;
    }
    else
    {
        return true;
    }
}

/**
 * @param $cpf
 * @return bool
 * Calculo para validar CPF
 */
function validaCPF($cpf)
{
    if ($cpf === '')
        return false;
    if (mb_strlen($cpf) !== 11 or
        $cpf === "00000000000" or
        $cpf === "11111111111" or
        $cpf === "22222222222" or
        $cpf === "33333333333" or
        $cpf === "44444444444" or
        $cpf === "55555555555" or
        $cpf === "66666666666" or
        $cpf === "77777777777" or
        $cpf === "88888888888" or
        $cpf === "99999999999")
        return false;
    $add = 0;
    $array = str_split($cpf);
    for ($i = 0; $i < 9; $i ++)
    {
        $add += $array[$i] * (10 - $i);
    }

    $rev = 11 - ($add % 11);
    if ($rev === 10 || $rev === 11)
        $rev = 0;
    if ($rev != $array[9])
        return false;
    $add = 0;
    for ($i = 0; $i < 10; $i ++)
    {
        $add += $array[$i] * (11 - $i);
    }

    $rev = 11 - ($add % 11);
    if ($rev === 10 || $rev === 11)
        $rev = 0;
    if ($rev != $array[10])
        return false;
    return true;
}