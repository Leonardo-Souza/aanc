<?php

class CRUDException extends Exception
{
    
}

class ModelPersistencia
{
    /**
     * Variáveis públicas e estáticas de configuração
    **/
    public static $sgbd = "mysql";
    public static $dbhost = "localhost";
    public static $dbname = "dbaanc";
    public static $dbuser = "root";
    public static $dbpass = "";
    public static $charset = "utf8mb4";

    /**
     * @return PDO
     * @throws CRUDException
     */
    public static function connect() 
    {
        try 
        {
            // Nova conexão com o banco de dados
            $conn = new PDO(self::$sgbd.":host=".self::$dbhost.";dbname=".self::$dbname.";"
                . "charset=".self::$charset.";", self::$dbuser, self::$dbpass);
            
            // Lança erros como exce
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            
            // Retira emulação
            $conn->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
            // Retorna conexão
            return $conn;
        }
        catch (PDOException $ex)
        {
            // Lança exceção com o erro dado na conexão
            throw new CRUDException($ex->getMessage());
        }
    }
    
    /**
     * Função para inserir novos dados no Banco de Dados
     * 
     * @param type $table
     * @param type $columns
     * @param type $values
     * @return boolean
     * @throws CRUDException
     * 
     */
    public static function insert($table, $columns, $values)
    {
        // Inicialização de variáveis
        $expression = null;
        $isArray = false;
        
        // Se ambos parâmetros forem arrays
        if (is_array($columns) and is_array($values))
        {
            // Se arrays tiverem o mesmo tamanho
            if ((count($columns)) == (count($values)))
            {
                // conta quantidades de valores a inserir
                $valuesTotal = count($values);
                
                for ($item = 0; $item < $valuesTotal; $item++)
                {
                    // Monta expressão de bind :value0,:value1 ...
                    $expression = $expression . ":value{$item},";
                }
                
                // Remove a última vírgula
                $expression = mb_substr($expression, 0, -1); 

                // Monta parte de SQL (INSERT INT Tabela)
                $table = "INSERT INTO " . $table . " ";
                
                // Monta parte de SQL (coluna1,coluna2)
                $column = "(" . implode(", ", $columns) . ")";
                
                // Monta parte de SQL VALUES(:value0,:value1)
                $expression = " VALUES(" . $expression . ")";
                
                // Monta SQL completa (INSERT INTO Tabela (Colunas) VALUES(Valores))
                $sql = $table . $column . $expression;
                
                // Sinaliza que são arrays e o termino de montagem
                $isArray = true;
            }
            // Se arrays forem de tamanho diferente
            else
            {
                throw new CRUDException("We must have the same number of columns and values.");
            }
        }
        // Se @param type $columns for array e @param type $values não for
        else if (is_array($columns) and ! is_array($values))
        {
            throw new CRUDException("'values' must be an array.");
        }
        // Se @param type $values for array e @param type $columns não for
        else if (!is_array($columns) and is_array($values))
        {
            throw new CRUDException("'columns' must be an array.");
        }
        // Se ambos forem strings comuns
        else
        {
            /** Cria partes de SQL simples 
            * (INSERT INTO Tabela (Coluna) VALUES(Valor) )
            **/
            $table = "INSERT INTO {$table} ";
            $column = "({$columns})";
            $expression = " VALUES(:value0)";
            
            // Monta SQL final unindo as outras partes
            $sql = $table . $column . $expression;
            
            // Sinaliza que não são arrays
            $isArray = false;
        }
        
        return self::executeSQL($sql, $isArray, $values);
    }
    
    /**
     * Função para realizar consulta no Banco de Dados:
     * 
     * @param string $table
     * @param type $columns
     * @param type $where
     * @param type $order
     * @param type $limit
     * @param type $like
     * @return type
     * @throws CRUDException
     * 
    **/
    public static function consult($table, $columns = "*", $where = NULL, $order = NULL, $limit = NULL, $like = NULL)
    {
        /**
         * Realiza tratamento de parâmetros
        **/

        // Se tiver parâmetro de colunas
        if ($columns)
        {
            // Monta parte da SQL com colunas citadas
            $columns = "SELECT " . $columns . " ";
        }
        // Se não tiver parâmetro de colunas
        else
        {
            // Monta parte da SQL selecionando todas colunas (*)
            $columns = "SELECT * ";
        }
        
        // Se tiver parâmetro tabela
        if ($table)
        {
            // Monta parte da SQL indicando a tabela
            $table = "FROM " . $table . " ";
        }
        // Se não tiver parâmetro tabela
        else
        {
            // Lança uma exceção
            throw new CRUDException("No table has been indicated.");
        }

        // Monta parte de WHERE com a função
        $where = self::minwhere($where);

        // Se tiver parâmetro de ordem
        if ($order)
        {
            // Pega o último caracter do parâmetro
            $char = mb_substr($order, -1);
            // Retura o último caracter do parâmetro
            $order = mb_substr($order, 0, -1);
            
            // Verifica se caracter é igual a +
            if ($char == "+")
            {
                // Monta parte da SQL com ORDEM em ascedente
                $order = "ORDER BY " . $order . " ASC ";
            }
            // Verifica se caracter é igual a -
            else if ($char == "-")
            {
                // Monta parte da SQL com ORDEM em descendente
                $order = "ORDER BY " . $order . " DESC ";
            }
            // Se não for nem + nem -
            else
            {
                // Lança exceção de erro
                throw new CRUDException("Tell +/- at the end of variable order!");
            }
        }
        // Se não tiver parâmetro
        else
        {
            // Define como NULL para evitar erro ao montar SQL final
            $order = NULL;
        }

        // Se tiver parâmetro de limite
        if ($limit)
        {
            // Se for um numeral
            if (is_numeric($limit))
            {
                // Monta parte do SQL (... LIMIT X ...)
                $limit = "LIMIT " . $limit . " ";
            }
            // Se não for numeral
            else 
            {
                // Lança exceção com o erro
                throw new CRUDException("Enter a numeric limit!");
            }
        }
        // Se não tiver parâmetro
        else
        {
            // Define como NULL para evitar erro ao montar SQL final
            $limit = NULL;
        }
        
        // Se tiver parâmetro de Like
        if ($like)
        {
            // Monta parte de SQL (... LIKE 'Parâmetro' ...)
            $like = " LIKE '" . $like . "' ";
        }
        // Se não tiver parâmetro
        else
        {
            // Define como NULL para evitar erro ao montar SQL final
            $like = NULL;
        }

        // Monta SQL final (SELECT Colunas FROM Tabela WHERE .. LIKE .. ORDER .. LIMIT ..)
        $sql = $columns . $table . $where . $like . $order . $limit;

        // Se conectar no Banco de Dados
        if ($conn = self::connect())
        {
            // Tenta fazer uma pesquisa
            if ($result = $conn->query($sql))
            {
                // Armazena todos os resultados em um Array
                $rows = $result->fetchAll(PDO::FETCH_ASSOC);
                
                // Se array de resultados estiver vazio
                if (empty($rows))
                {
                    // Fecha conexão
                    $conn = null;
                    // Lança exceção com erro
                    return false;
                }
                else
                {
                    // Fecha conexão
                    $conn = null;
                    // Retorna resultados
                    return $rows;
                }
                
            }
            // Se não conseguiu executar a query
            else
            {
                throw new CRUDException("Error execute query: ".$result->errorInfo());
            }
        }
        // Se não conseguiu conexão com o Banco de Dados
        else
        {
            throw new CRUDException("Unable to connect to database!<br>\n<i>Check the connection variables.");
        }
    }
    
    /**
     * Função de atualização:
     * 
     * @param type $table
     * @param type $columns
     * @param type $values
     * @param type $where
     * @return boolean
     * @throws CRUDException
     * 
     */

    public static function update($table, $columns, $values, $where = NULL) 
    {
        // Inicialização de variáveis
        $isArray = false;
        $sql = null;
        $expression = null;
        
        // Verifica se parâmetros dados são arrays
        if (is_array($columns) and is_array($values))
        {
            // Verifica se ambos tê o mesmo comprimento
            if ((count($columns)) == (count($values)))
            {
                //conta quantos valores
                $valuesTotal = count($columns); 
                for ($item = 0; $item < $valuesTotal; $item ++)
                {
                    /**
                     * Monta expressão para bind no PDO, onde cada coluna
                     * será associada a um bind :valorI, exemplo:
                     * id=:value0,nome=:value1 ...
                     */
                    $expression = $expression . "{$columns[$item]}=:value{$item},";
                }
                
                // remove a última virgula
                $expression = mb_substr($expression, 0, -1); 
                
                // SQL: UPATE Tabela
                $table = "UPDATE " . $table . " ";
                // SQL: SET id=:value0,nome=:value1 ...
                $expression = " SET " . $expression . " ";
                // Monta meu WHERE (condição)
                $where = self::minwhere($where);
                // Une e forma a SQL (UPDATE Tabela SET id=:value0,nome=:value1 WHERE ...)
                $sql = $table . $expression . $where;
                // Sinaliza que terminou montagem do SQL e é array de valores
                $isArray = true;
            }
            // Se arrays forem de tamanho diferentes
            else
            {
                throw new CRUDException("We must have the same number of columns and values.");
            }
        }
        // Se @param type $columns for array e @param type $values não for
        else if (is_array($columns) and ! is_array($values)) 
        {
            throw new CRUDException("'values' must be an array.");
        }  
        // Se @param type $values for array e @param type $columns não for
        else if (!is_array($columns) and is_array($values)) 
        {
            throw new CRUDException("'columns' must be an array.");
        }  
        // Se ambos forem strings comuns
        else
        {
            // Cria partes de SQL simples (UPDATE Tabela SET id = :value0 WHERE ...)
            $table = "UPDATE {$table} ";
            $coluna = "SET {$columns}";
            $value = "  = :value0 ";
            // Chama função para montagem de WHERE
            $where = self::minwhere($where);

            // Cria SQL simples (UPDATE Tabela SET id = :value0 WHERE ...)
            $sql = $table . $coluna . $value . $where;
            
            // Determina que parâmetros não são arrays
            $isArray = false;
        }
        
        return self::executeSQL($sql, $isArray, $values);
    }

    /**
     * Função para deletar dados ou tabelas do Banco de Dados:
     * 
     * @param string $table
     * @param type $where
     * @return boolean
     * @throws CRUDException
     * 
    **/
    public static function delete($table, $where = NULL)
    {
        // Se tiver @param string $table
        if ($table)
        {
            // Monta parte de SQL: DELETE FRO Tabela
            $table = "DELETE FROM " . $table . " ";
        }
        // Se não tiver @param string $table
        else
        {
            // Lança exceção com erro
            throw new CRUDException("No table has been indicated.");
        }

        // Monta WHERE com função que á trata
        $where = self::minwhere($where);

        // Monta SQL final: DELETE FROM Tabela WHERE ....
        $sql = $table . $where;

        // Se conectou ao Banco de Dados
        if ($conn = self::connect())
        {
            // Se conseguiu testar a query
            if ($result = $conn->query($sql))
            {
                // Prepara a query para ser executada
                $stmt = $conn->prepare($sql);

                // Executa a query
                if ($result = $stmt->execute())
                {
                    // Fecha conexão e retorna true
                    $conn = null;
                    return true;
                }
                // Se não conseguiu
                else
                {
                    // Retorna um erro
                    throw new CRUDException("Error: ".$stmt->errorInfo());
                }
            }
            // Se não conseguiu testar a query
            else
            {
                // Retorna um erro de query inválida
                throw new CRUDException("Invalid query!");
            }
        }
        // Se não conseguiu conectar ao Banco de Dados
        else
        {
            throw new CRUDException("Unable to connect to database!<br>\n<i>Check the connection variables.");
        }
    }

    /**
     * Função para montar WHERE da SQL
     * 
     * @param type $where
     * @return type
     * 
     */
    private static function minwhere($where) 
    {
        // Inicialização de variáveis
        $newwhere = "";
        
        // Se tiver @param type $where 
        if ($where)
        {
            // Se string não tiver a palavra WHERE
            if (mb_stripos($where, "where") !== false)
            {
                // Se string não tiver aspas simples
                if (!strstr($where, "'"))
                {
                    // Chama função para adicionar aspas simples na string
                    $newwhere = self::whereHandling($where);
                }
                // Se WHERE já tiver aspas simples
                else
                {
                    // apenas coloca valor da WHERE antiga
                    $newwhere = $where;
                }
            }
            // Se string não tiver palavra WHERE
            else
            {
                // Se string não tiver aspas simples
                if (!strstr($where, "'"))
                {
                    // Adiciona WHERE na string nova
                    $newwhere = "WHERE ";
                    
                    // Chama função para adicionar aspas simples na string
                    $newwhere .= self::whereHandling($where);
                }
                // Se já tiver aspas simples
                else
                {
                    // Adiciona WHERE e só
                    $newwhere = "WHERE " . $where;
                }
            }
        }
        // Retorna nova string de WHERE
        return $newwhere;
    }
    
    /**
     * Função para higienizar arrays de bind
     * 
     * @param type $stmt
     * @param type $quantity
     * @param type $values
     * 
     */
    private static function bind($stmt, $quantity, $values)
    {
        // Percorre array de valores original
        for ($item = 0; $item < $quantity; $item ++) 
        {
            // Se item do array for uma string
            if (is_string($values[$item]))
            {
               // Faz bind higienizando como string
               $stmt->bindParam(":value{$item}", $values[$item], PDO::PARAM_STR); 
            }
            // Se item do array for um numeral
            else if (is_numeric($values[$item]))
            {
                // Faz bind higienizando como inteiro
                $stmt->bindParam(":value{$item}", $values[$item], PDO::PARAM_INT);
            }
            // Se item do array for um boleano   
            else if (is_bool($values[$item]))
            {
                // Faz bind higienizando como bool
                $stmt->bindParam(":value{$item}", $values[$item], PDO::PARAM_BOOL);
            }
            // Se item do array for NULL
            else if (is_null($values[$item]))
            {
                // Faz bind higienizando como NULL
                $stmt->bindParam(":value{$item}", $values[$item], PDO::PARAM_NULL);
            }
            // Se item do array for um long
            else if (is_long($values[$item]))
            {
                // Faz bind higienizando como long
                $stmt->bindParam(":value{$item}", $values[$item], PDO::PARAM_LOB);
            }
                
        }
    }
    
    /**
     * Função para adicionar aspas simples entre valores da SQL
     * 
     * @param type $string
     * @return string
     * 
     */
    private static function whereHandling($string)
    {
        $return = "";
        // Separa string em arrays cortando em especiais de SQL e espaços
        $arrayExpressions = preg_split("/([^\w]+\s*)/", $string, -1,PREG_SPLIT_DELIM_CAPTURE);

        // Percorrendo array de expressões
        for ($item = 0; $item < count($arrayExpressions); $item++)
        {
            // Se array for um sinal de SQL
            if (mb_stripos($arrayExpressions[$item], "=") !== false ||
                mb_stripos($arrayExpressions[$item], "!") !== false ||
                mb_stripos($arrayExpressions[$item], "<") !== false ||
                mb_stripos($arrayExpressions[$item], ">") !== false)
            {
                /**
                 *  Adiciona aspas simples nas extremidades do próximo elemento,
                 * pois ele será um valor
                **/
                $arrayExpressions[$item + 1] = "'" . $arrayExpressions[$item + 1] . "'";
            }
            // Monta a nova WHERE, adicionando espaços entre os elementos do array
            $return .= " " . $arrayExpressions[$item] . " ";
        }
        return $return;
    }
    
    /**
     * Função para executar SQL no Banco de Dados
     * 
     * @return boolean
     * @throws CRUDException
    **/
    private static function executeSQL($sql, $isArray, $values)
    {
        // Se conectar com sucesso ao Banco de Dados
        if ($conn = self::connect())
        {
            // Prepara SQL no Banco
            $stmt = $conn->prepare($sql);
            if(!$isArray)
            {
                // Troca valor do bind com higienização
                $stmt->bindParam(":value0", $values);
            }
            else
            {
                $valuesTotal = count($values);
                // Chama função que faz bind quando se tem array
                self::bind($stmt, $valuesTotal, $values);
            }

            // Retorna true se executou com sucesso
            if ($result = $stmt->execute())
            {
                // Destrói sessão de conexão PDO
                $conn = null;
                return true;
            }
            // Se não executou, lança exceção com o erro
            else
            {
                // Destrói sessão de conexão PDO
                $conn = null;
                // Lança exceção com o erro
                throw new CRUDException($stmt->errorInfo());
            }
        }
        //Se não conectar ao Banco de Dados
        else
        {
            throw new CRUDException("Unable to connect to database!<br>\n<i>Check the connection variables.");
        }
    }
}

?>
