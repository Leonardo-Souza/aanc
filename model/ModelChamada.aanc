<?php

/**
 * Created by PhpStorm.
 * User: Leonardo Vilarinho e Guilherme Mamedio
 * Date: 29/03/2016
 * Time: 11:10
 */

// Includes
require_once 'ModelObjeto.aanc';
require_once 'ModelPersistencia.aanc';
require_once 'libs/dompdf/autoload.inc.php';

use Dompdf\Dompdf;

class ModelChamada extends ModelObjeto
{

    private $crud = null;
    private $dompdf = NULL;
    /**
     * ModelFuncionario constructor.
     * Exectado quando o ModelFuncionario Ã© instanciado, instancia um novo ModelPersistencia
     */
    public function __construct()
    {
        $this->crud = new ModelPersistencia();
        $this->dompdf = new Dompdf();
    }

    public function preparaChamada($id)
    {
        try
        {
            $id = (int)$id;
            return $this->sql("SELECT alunos.id, alunos.nome, alunos.cpf, chamada.status FROM alunos, chamada, viagens WHERE alunos.id = chamada.aluno AND chamada.viagem = viagens.id AND viagens.id = {$id}");
        }
        catch (CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    public function realizarChamada($chamada)
    {
        try
        {
            foreach ($chamada as $key => $value)
            {
                $aluno = str_replace("a", "", $key);
                $this->crud->update("chamada", "status", 1, "aluno = {$aluno}");
            }
            return true;
        }
        catch (CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    public function pdfChamada($chamada, $tipo)
    {
        try
        {
            $this->make($chamada, $tipo);
        }
        catch (CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    private function fim()
    {
        return <<<AFTER
            </body>
        </html>
AFTER;
    }

    private function inicio()
    {
        return <<<BEFORE
        <!DOCTYPE html>
        <html lang="pt">
            <head>
                <meta charset="utf-8" />
                <style>
                h2{color:red;}
                table{width:100%;}
                th{border: 1px solid black;}
                td{border-bottom: 1px solid black;}
                .center{text-align: center;}
                .fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
                .fa-heart:before{content:"\\f004"}
                </style>
            </head>
            <body>
BEFORE;
    }

    private function make($chamada, $tipo)
    {

        $tabela = "<table class=\"table table-responsive  form-group-sm\"><thead><tr><th>Aluno</th><th>CPF</th><th>Ausente</th><th>Presente</th></tr></thead>";

        if(!$tipo)
        {
            for($item = 0; $item < count($chamada); $item++)
            {
                $tabela .= "<tr><td>{$chamada[$item]['nome']}</td><td class='center'>{$chamada[$item]['cpf']}</td><td></td><td></td></tr>";
            }
        }
        else
        {
            for($item = 0; $item < count($chamada); $item++)
            {
                $ausente = ($chamada[$item]['status'] == 0) ? "X" : "";
                $presente = ($chamada[$item]['status'] == 1) ? "X" : "";
                $tabela .= "<tr><td>{$chamada[$item]['nome']}</td><td class='center'>{$chamada[$item]['cpf']}</td><td>{$ausente}</td><td>{$presente}</td></tr>";
            }
        }


        $tabela .= "</table>";

        $this->gerar($this->inicio().$tabela.$this->fim());
    }

    private function gerar($html)
    {
        $this->dompdf->loadHtml($html);
        // (Optional) Setup the paper size and orientation
        $this->dompdf->setPaper('A4', 'portrait');

        // Render the HTML as PDF
        $this->dompdf->render();

        // Output the generated PDF to Browser
        $this->dompdf->stream("chamada_". time());
    }

    private function sql($sql)
    {
        if($conn = $this->crud->connect())
        {

            if ($result = $conn->query($sql))
            {
                $rows = $result->fetchAll(PDO::FETCH_ASSOC);

                if (!empty($rows))
                {
                    return $rows;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
    }
    
}