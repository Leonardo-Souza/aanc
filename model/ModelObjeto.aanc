<?php

/**
 * Created by PhpStorm.
 * User: Leonardo Vilarinho
 * Date: 14/04/2016
 * Time: 13:15
 */

require_once 'ModelPersistencia.aanc';
require_once 'validacao.aanc';
require_once 'GeraPDF.aanc';

class ModelObjeto
{

    private $crud = NULL;
    private $pdf = NULL;
    
    public function __construct()
    {
        $this->crud = new ModelPersistencia();
        $this->pdf = new GeraPDF();
    }

    /**
     * @param $metodo
     * @param $dados
     * Chama método privado com parâmetros
     */
    public function abrirMetodo($metodo, $dados)
    {
        $metodo = "executa{$metodo}";
        return $this->$metodo($dados);
    }

    private function executaListagem($dados)
    {
        try
        {
            return $resultado = $this->crud->consult($dados, "*");
        }
        catch(CRUDException $ex)
        {
            throw new Exception();
        }
    }
    
    private function executaCriacao($dados)
    {
        try
        {
            $verifica = null;

            if(isset($dados['consulta']))
            {
                $verifica = $this->crud->consult($dados['tabela'], "*", "{$dados['consulta']} = '{$dados[$dados['consulta']]}'");
                unset($dados['consulta']);
            }

            if(empty($verifica) or $verifica == null)
            {
                $tabela = $dados['tabela'];
                unset($dados['tabela']);

                $this->crud->insert
                (
                    $tabela,
                    $this->refatoraArray($dados, true),
                    $this->refatoraArray($dados, false)
                );
                return true;
            }
            else
            {
                throw new Exception("Registro já existente.");
                return false;
            }

        }
        catch(CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
            return false;
        }
    }

    public function preparaConsultaId($id, $tabela)
    {
        if(validaInteiro($id, "ID incorreto.", true))
        {
            $dados = array("id" => $id, "tabela" => $tabela);
            return $this->abrirMetodo("consultaId", $dados);
        }

    }

    private function executaConsultaId($dados)
    {
        try
        {
            $consulta = $this->crud->consult($dados['tabela'], "*", "id = {$dados['id']}");
            return (!empty($consulta)) ? $consulta : false;

        }
        catch(CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    public function preparaConsulta($coluna, $nome, $tabela)
    {

        return $this->executaConsulta($coluna, $nome, $tabela);
    }

    private function executaConsulta($coluna, $parametro, $tabela)
    {
        try
        {

            if($coluna == null and $parametro == null)
            {
                $consulta = $this->crud->consult($tabela, "*");
            }
            else if($coluna != null and $tabela != null and $parametro == null)
            {
                $consulta = $this->crud->consult($tabela, "*", $coluna);
            }
            else
            {
                $consulta = $this->crud->consult($tabela, "*", $coluna, NULL, NULL, "%{$parametro}%");
            }

            return (!empty($consulta)) ? $consulta : false;

        }
        catch(CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }


    public function preparaNadaConsta($tabela, $onde = "1 = 1")
    {
        return $this->executaNadaConsta($tabela, $onde);
    }

    private function executaNadaConsta($tabela, $onde = "1 = 1")
    {
        try
        {
            $consulta = $this->crud->consult($tabela, "*", $onde);
            $curso = $this->crud->consult("cursos", "nome", "id  = {$consulta[0]['curso']}");
            $this->pdf->make($consulta, $curso[0]['nome']);
            return true;
        }
        catch(CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    private function executaEdicao($dados)
    {
        try
        {
            $tabela = $dados['tabela'];
            unset($dados['tabela']);
            return $this->crud->update
            (
                $tabela,
                $this->refatoraArray($dados, true),
                $this->refatoraArray($dados, false),
                "id = {$dados['id']}"
            );
        }
        catch(CRUDException $ex)
        {
            return false;
        }
    }

    public function preparaExclusao($id, $tabela)
    {
        if(validaInteiro($id, "ID incorreto", true))
        {
            return $this->executaExclusao($id, $tabela);
        }
    }

    private function executaExclusao($id, $tabela)
    {
        try
        {
            return $this->crud->delete
            (
                $tabela,
                "id = {$id}"
            );
        }
        catch(CRUDException $ex)
        {
            throw new Exception($ex->getMessage());
        }
    }

    private function refatoraArray($array, $colunas = true)
    {
        $resultado = array();
        if($colunas)
        {
            foreach ($array as $key => $value)
            {
                array_push($resultado, $key);
            }
        }
        else
        {
            foreach ($array as $key => $value)
            {
                array_push($resultado, $value);
            }
        }

        return $resultado;

    }

}